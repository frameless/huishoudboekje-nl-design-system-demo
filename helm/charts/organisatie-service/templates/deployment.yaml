apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "organisatie-service.fullname" . }}
  labels:
    {{- include "organisatie-service.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "organisatie-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if eq (include "organisatie-service.imageTag" .) "dev" }}
        dev: {{ randAlphaNum 24 | b64enc | quote}}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "organisatie-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "organisatie-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ include "organisatie-service.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: HHB_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-secrets" (include "organisatie-service.fullname" .) }}
                  key: SECRET_KEY
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: password
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: username
            - name: ORGANISATIE_DATABASE_URL
              value: "postgresql://$(PGUSER):$(PGPASSWORD)@{{ .Values.database.service }}/{{ .Values.database.name }}"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
        - name: {{ printf "%s-db-init" .Chart.Name | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ include "organisatie-service.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: HHB_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-secrets" (include "organisatie-service.fullname" .) }}
                  key: SECRET_KEY
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: password
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: username
            - name: ORGANISATIE_DATABASE_URL
              value: "postgresql://$(PGUSER):$(PGPASSWORD)@{{ .Values.database.service }}/{{ .Values.database.name }}"
          command: ["python"]
          args: ["manage.py", "db", "upgrade"]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: {{ printf "%s-sample-data" .Chart.Name | quote }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "registry.gitlab.com/commonground/huishoudboekje/app-new/sample_data:{{ include "organisatie-service.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: password
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.name }}.{{ .Values.database.service }}.credentials.postgresql.acid.zalan.do
                  key: username
            - name: DATABASE_URL
              value: "postgresql://$(PGUSER):$(PGPASSWORD)@{{ .Values.database.service }}/{{ .Values.database.name }}"
            - name: DATABASE_NAME
              value: "{{ .Values.database.name }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-secrets" (include "organisatie-service.fullname" .) }}
  labels:
  {{- include "organisatie-service.labels" . | nindent 4 }}
data:
  SECRET_KEY: {{ default (randAlphaNum 24) .Values.secretKey | b64enc | quote }}
