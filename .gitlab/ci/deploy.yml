.review: &review
  variables:
    CREATE_NAMESPACE: "yes please"
    NAMESPACE: "hhb-$CI_COMMIT_REF_SLUG"
    BASE_DOMAIN: nlx.reviews
    APP_SETTINGS: "hhb_backend.config.StagingConfig"
    DATABASE_PERSISTENCE: "false"
    INGRESS_ANNOTATIONS: "=null"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://hhb-$CI_COMMIT_REF_SLUG.$BASE_DOMAIN/
  only:
    - branches@commonground/huishoudboekje/app-new
  except:
    - master
    - develop
    - acceptance

.develop: &develop
  variables:
    CREATE_NAMESPACE: ""
    NAMESPACE: "hhb-test"
    BASE_DOMAIN: huishoudboekje.demoground.nl
    APP_SETTINGS: "hhb_backend.config.StagingConfig"
    HHB_HOST: "test.$BASE_DOMAIN"
    INGRESS_ANNOTATIONS: ".cert-manager\\.io/cluster-issuer=letsencrypt-prod"
  environment:
    name: test
    url: https://test.$BASE_DOMAIN/
  only:
    - develop

.acceptance: &acceptance
  variables:
    CREATE_NAMESPACE: ""
    NAMESPACE: "hhb-acc"
    BASE_DOMAIN: huishoudboekje.demoground.nl
    HHB_HOST: "acc.$BASE_DOMAIN"
    AUTH_AUDIENCE: "https://acc.$BASE_DOMAIN"
    INGRESS_ANNOTATIONS: ".cert-manager\\.io/cluster-issuer=letsencrypt-prod"
  environment:
    name: acc
    url: https://acc.$BASE_DOMAIN/
  only:
    - acceptance

.master: &master
  variables:
    CREATE_NAMESPACE: ""
    NAMESPACE: "hhb-demo"
    BASE_DOMAIN: huishoudboekje.demoground.nl
    HHB_HOST: "demo.$BASE_DOMAIN"
    AUTH_AUDIENCE: "https://demo.$BASE_DOMAIN"
    INGRESS_ANNOTATIONS: ".cert-manager\\.io/cluster-issuer=letsencrypt-prod"
  environment:
    name: demo
    url: https://demo.$BASE_DOMAIN/
  only:
    - master@commonground/huishoudboekje/app-new

.retry: &retry
  retry:
    max: 2
    when: script_failure

.deployer: &deployer
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  tags:
    - cg
    - docker

# Deploy template for app
.deploy: &deploy
  <<: *deployer
  <<: *retry
  stage: deploy
  needs:
    - build-shell-runner
    - build-helm
  before_script:
    # SESSION_SECRET in GitLab CI/CD variables
    - OIDC_CLIENT_ID="huishoudboekje"
    - OIDC_CLIENT_SECRET="ZwwcL2zjQyJUBnFPVoOb"
    - OIDC_DEX="true"
    - THEME="sloothuizen"
    - HHB_HOST=${HHB_HOST:-$NAMESPACE.$BASE_DOMAIN}
    - DEX_HOST=dex-${HHB_HOST}
    - OIDC_ISSUER=${OIDC_ISSUER:-https://${DEX_HOST}}
    - DATABASE_PERSISTENCE="${DATABASE_PERSISTENCE:-true}"
    - UNLEASH_URL=https://gitlab.com/api/v4/feature_flags/unleash/20352213
    - UNLEASH_INSTANCEID=JbZyPux6M7xwejsESy9L
    - UNLEASH_APPNAME=huishoudboekje-frontend
    - sh helm/theme-yaml.sh frontend/theme/${THEME:-sloothuizen} > helm/theme.yaml
    # This lets the huishoudboekje postgresql be upgraded
    # see https://stackoverflow.com/questions/53186601/re-use-persistentvolume-after-re-installing-a-helm-deployment
    - kubectl delete --namespace $NAMESPACE statefulsets.apps huishoudboekje-postgresql --cascade=false 2>&1 >/dev/null  || true
  script:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm dependency build ./helm/contactcatalogus
    - |
      helm upgrade --install "huishoudboekje" helm/repo/huishoudboekje-${COMPONENT_VERSION}.tgz \
        ${HELM_DEBUG:+--debug} \
        --namespace $NAMESPACE ${CREATE_NAMESPACE:+--create-namespace} \
        --values helm/charts/huishoudboekje/values.yaml \
        --values helm/values-dex.yaml \
        --values helm/theme.yaml \
        --values helm/values-review-local.yaml \
        --set "global.imageTag=$IMAGE_TAG" \
        --set "medewerker-frontend.ingress.hosts[0].host=$HHB_HOST" \
        --set "medewerker-frontend.ingress.hosts[0].paths[0]=/" \
        --set "medewerker-frontend.ingress.tls[0].hosts[0]=$HHB_HOST" \
        --set "medewerker-frontend.ingress.annotations${INGRESS_ANNOTATIONS}" \
        --set "unleash-service.ingress.hosts[0].host=$HHB_HOST" \
        --set "unleash-service.ingress.hosts[0].paths[0]=/api/unleash/" \
        --set "unleash-service.ingress.tls[0].hosts[0]=$HHB_HOST" \
        --set "unleash-service.ingress.annotations${INGRESS_ANNOTATIONS}" \
        --set "medewerker-backend.ingress.hosts[0].host=$HHB_HOST" \
        --set "medewerker-backend.ingress.hosts[0].paths[0]=/api/" \
        --set "medewerker-backend.ingress.tls[0].hosts[0]=$HHB_HOST" \
        --set "medewerker-backend.ingress.annotations${INGRESS_ANNOTATIONS}" \
        ${SESSION_SECRET:+--set "medewerker-backend.secretKey=${SESSION_SECRET}"} \
        ${AUTH_AUDIENCE:+--set medewerker-backend.authAudience=${AUTH_AUDIENCE}} \
        --set "medewerker-backend.appSettings=${APP_SETTINGS:-hhb_backend.config.ProductionConfig}" \
        --set "medewerker-backend.oidc.issuer=${OIDC_ISSUER}" \
        --set "medewerker-backend.oidc.clientId=${OIDC_CLIENT_ID}" \
        --set "medewerker-backend.oidc.clientSecret=${OIDC_CLIENT_SECRET}" \
        --set "medewerker-backend.oidc.authorizationEndpoint=${OIDC_AUTHORIZATION_ENDPOINT:-${OIDC_ISSUER}/auth}" \
        --set "medewerker-backend.oidc.redirectUris[0].prefix=https://$HHB_HOST" \
        --set "medewerker-backend.oidc.redirectUris[0].callback=https://$HHB_HOST/api/oidc_callback" \
        --set "medewerker-backend.oidc.tokenUri=${OIDC_TOKEN_ENDPOINT:-${OIDC_ISSUER}/token}" \
        --set "medewerker-backend.oidc.tokeninfoUri=${OIDC_TOKENINFO_ENDPOINT:-${OIDC_ISSUER}/tokeninfo}" \
        --set "medewerker-backend.oidc.userinfoUri=${OIDC_USERINFO_ENDPOINT:-${OIDC_ISSUER}/userinfo}" \
        --set "dex.enabled=${OIDC_DEX}" \
        --set "dex.ingress.hosts[0]=${DEX_HOST}" \
        --set "dex.ingress.tls[0].hosts[0]=${DEX_HOST}" \
        --set "dex.ingress.annotations${INGRESS_ANNOTATIONS}" \
        --set "dex.config.issuer=${OIDC_ISSUER}" \
        --set "dex.config.staticClients[0].secret=${OIDC_CLIENT_SECRET}" \
        --set "dex.config.staticClients[0].redirectURIs[0]=https://$HHB_HOST/api/oidc_callback" \
        --set "postgresql.postgresqlPassword=${DATABASE_PASSWORD}" \
        --set "postgresql.persistence.enabled=${DATABASE_PERSISTENCE}" \
        --render-subchart-notes
    - |
      helm upgrade hhb-contactcatalogus helm/contactcatalogus --install \
        --namespace=$NAMESPACE \
        ${CREATE_NAMESPACE:+--create-namespace} \
        --set settings.env=prod \
        --set settings.debug=0 \
        --set settings.cache=1
    - sleep 30 # Todo: actually wait for the db to be ready
    - kubectl exec $(kubectl get pods -l app.kubernetes.io/instance=hhb-contactcatalogus -n $NAMESPACE | grep php | cut -d' ' -f1 | head -n1) --namespace=$NAMESPACE -- bin/console doctrine:schema:update -f
    - echo -e -n "${HHB_HOST}" > ci_review_hostname.txt
  artifacts:
    paths:
      - ci_review_hostname.txt

# Shut down app
destroy-review:
  <<: *deployer
  <<: *review
  <<: *retry
  stage: deploy
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    NAMESPACE: "hhb-$CI_COMMIT_REF_SLUG"
    GIT_STRATEGY: none
  script:
    - kubectl delete namespace $NAMESPACE
  when: manual

.helm-test: &helm-test
  <<: *deployer
  stage: e2e
  script:
    helm test --namespace $NAMESPACE  --logs  huishoudboekje
  allow_failure: true

deploy-review:
  <<: *deploy
  <<: *review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://hhb-$CI_COMMIT_REF_SLUG.$BASE_DOMAIN/
    on_stop: destroy-review
    auto_stop_in: 7 days

deploy-develop:
  <<: *deploy
  <<: *develop

deploy-acceptance:
  <<: *deploy
  <<: *acceptance

deploy-master:
  <<: *deploy
  <<: *master

helm-test-review:
  <<: *helm-test
  <<: *review
  needs:
    - deploy-review

helm-test-develop:
  <<: *helm-test
  <<: *develop
  needs:
    - deploy-develop