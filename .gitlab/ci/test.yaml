.only-on-merge-request: &only-on-merge-request
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.rules-tests: &rules-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == "develop"


cypress-tests:
  stage: test
  needs: 
    - deploy-deployment-review
  image: registry.gitlab.com/commonground/huishoudboekje/cypress-test-executor-with-kubectl:latest
  variables:
    APP_HOST_NAME: "hhb-$CI_COMMIT_REF_SLUG.review.hhb-development.nl"
    APP_HOST: "https://hhb-$CI_COMMIT_REF_SLUG.review.hhb-development.nl"
    NAMESPACE: "hhb-$CI_COMMIT_REF_SLUG"
    PGPASSWORD: "postgres"
    DATABASE_HOST: "https://database.hhb-$CI_COMMIT_REF_SLUG.review.hhb-development.nl"
    DATABASE_HOST_NAME: "database.hhb-$CI_COMMIT_REF_SLUG.review.hhb-development.nl"
  script:
    - kubectl config use-context commonground/huishoudboekje/app-new:hhb-development
    - kubectl wait pod --all --for=condition=Ready --namespace=$NAMESPACE --timeout=5m
    - sh cypress/scripts/pipeline-execution.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' #Check when we want to run these tests, for now only on merge requests or manual      
      when: delayed
      start_in: 2 minutes
    - when: manual     




.frontend:
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-alpine
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - cd ./frontend/app
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
  retry:
    max: 2
    when: script_failure

frontend-test:
  <<: *rules-tests
  extends: .frontend
  script:
    - npm run lint
    - npm run test:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - frontend/app/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "frontend/app/coverage/cobertura-coverage.xml"
      junit: frontend/app/junit.xml
  when: on_success

# This template requires the following:
#   variables:
#      DIRECTORY: <the directory of the application>
.Service Test:
  stage: test
  needs: []
  retry:
    max: 2
    when: script_failure
  image:
    name: registry.gitlab.com/commonground/huishoudboekje/python-postgres/python-postgres:0.2.1
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${PIP_CACHE_DIR}
  script:
    - cd ${DIRECTORY}
    - pip install -r requirements.txt -r test_requirements.txt
    - pytest --junitxml=report.xml --cov=. --cov=models tests
    - coverage html -d htmlcov
    - coverage xml -o coverage.xml
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - ${DIRECTORY}/htmlcov
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${DIRECTORY}/coverage.xml
      junit: ${DIRECTORY}/report.xml
  when: on_success

postadressenservice-test:
  <<: *rules-tests
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-bullseye-slim
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - cd ./services/postadressenservice
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
    - npm run prisma:generate
  retry:
    max: 2
    when: script_failure
  script:
    - npm run test:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - services/postadressenservice/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "services/postadressenservice/coverage/cobertura-coverage.xml"
      junit: services/postadressenservice/junit.xml
  when: on_success

alarmenservice-test:
  <<: *rules-tests
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-bullseye-slim
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - cd ./services/alarmenservice
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
    - npm run prisma:generate
  retry:
    max: 2
    when: script_failure
  script:
    - npm run test:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - services/alarmenservice/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "services/alarmenservice/coverage/cobertura-coverage.xml"
      junit: services/alarmenservice/junit.xml
  when: on_success

signalenservice-test:
  <<: *rules-tests
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-bullseye-slim
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - cd ./services/signalenservice
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
    - npm run prisma:generate
  retry:
    max: 2
    when: script_failure
  script:
    - npm run test:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - services/signalenservice/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "services/signalenservice/coverage/cobertura-coverage.xml"
      junit: services/signalenservice/junit.xml
  when: on_success

unleashservice-test:
  <<: *rules-tests
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-alpine
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - cd ./services/unleashservice
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
  retry:
    max: 2
    when: script_failure
  script:
    - npm run test:coverage
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - services/unleashservice/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "services/unleashservice/coverage/cobertura-coverage.xml"
      junit: services/unleashservice/junit.xml
  when: on_success

backend-test:
  <<: *rules-tests
  extends: .Service Test
  variables:
    DIRECTORY: backend
    JWT_SECRET: pytest
    JWT_AUDIENCE: pytestsecret
    JWT_ISSUER: pytest
    JWT_ALGORITHMS: HS256

rapportage-service-test:
  <<: *rules-tests
  extends: .Service Test
  variables:
    DIRECTORY: services/rapportage_service

changeset:
  <<: *only-on-merge-request
  stage: test
  needs: []
  image:
    name: ${DOCKER_PROXY}node:20-alpine
  variables:
    NPM_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/npm"
    CYPRESS_INSTALL_BINARY: "0"
    GIT_DEPTH: 100 # Default is 50, but in Merge Requests with many commits, we might need more.
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  before_script:
    - apk add git
    - npm i --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
  script:
    - git fetch origin develop:develop
    - npm run check-changeset
