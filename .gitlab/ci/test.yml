test-frontend:
  stage: test
  tags:
    - docker
  needs: []
  image: node:lts-alpine
  variables:
    NPM_CACHE_DIR: ${CI_PROJECT_DIR}/.npm-cache
  cache:
    key: "${CI_COMMIT_REF_SLUG}__${CI_JOB_NAME}"
    paths:
      - ${NPM_CACHE_DIR}
  script:
    - cd ./frontend/app
    - npm ci --cache ${NPM_CACHE_DIR} --prefer-offline --no-progress --color=false --quiet
    - npm run lint

build-python-postgres:
  stage: build
  needs: []
  tags:
    - cg
    - shell
  variables:
    APP_NAME: python-postgres
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$APP_NAME:$IMAGE_TAG - < test.dockerfile
  after_script:
    - export DOCKER_CONFIG=/tmp/docker-config-$CI_JOB_ID
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$APP_NAME:$IMAGE_TAG
  only:
    - branches@commonground/huishoudboekje/app-new

Huishoudboekje Service Test:
  stage: test
  needs:
    - build-python-postgres
  tags:
    - cg
    - docker
  image:
    name: $CI_REGISTRY_IMAGE/$PYTHON_POSTGRES:$IMAGE_TAG
  script:
    - cd huishoudboekje-service
    - make install
    - make
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    expire_in: 1 week
    paths:
      - huishoudboekje-service/htmlcov
    expose_as: 'huishoudboekje-service coverage'
    reports:
      cobertura: huishoudboekje-service/coverage.xml
  only:
    - branches@commonground/huishoudboekje/app-new
