schema {
  query: RootQuery
  mutation: RootMutation
}
"""The root of all queries """
type RootQuery {
  afspraak(id: Int!): Afspraak
  afspraken(ids: [Int] = []): [Afspraak]
  bankTransaction(id: Int!): BankTransaction
  bankTransactions(filters: BankTransactionFilter): [BankTransaction]
  bankTransactionsPaged(start: Int, limit: Int, filters: BankTransactionFilter): BankTransactionsPaged
  customerStatementMessage(id: Int!): CustomerStatementMessage
  customerStatementMessages(ids: [Int] = []): [CustomerStatementMessage]
  export(id: Int!): Export
  exports(ids: [Int], startDatum: Date, eindDatum: Date): [Export]
  burger(id: Int!): Burger
  burgers(ids: [Int] = [], search: DynamicType): [Burger]
  burgersPaged(start: Int, limit: Int): BurgersPaged
  grootboekrekening(id: String!): Grootboekrekening
  grootboekrekeningen(ids: [String] = []): [Grootboekrekening]
  journaalpost(id: Int!): Journaalpost
  journaalposten(ids: [Int] = []): [Journaalpost]
  organisatie(id: Int!): Organisatie
  organisaties(ids: [Int] = []): [Organisatie]
  rekening(id: Int!): Rekening
  rekeningen(ids: [Int] = []): [Rekening]
  rubriek(id: String!): Rubriek
  rubrieken(ids: [String] = []): [Rubriek]
  configuratie(id: String!): Configuratie
  configuraties(ids: [String] = []): [Configuratie]
  gebruikersactiviteit(id: Int!): GebruikersActiviteit
  gebruikersactiviteiten(ids: [Int] = [], burgerIds: [Int] = [], afsprakenIds: [Int] = [], huishoudenIds: [Int] = []): [GebruikersActiviteit]
  gebruikersactiviteitenPaged(start: Int, limit: Int, burgerIds: [Int] = [], afsprakenIds: [Int] = [], huishoudenIds: [Int] = []): GebruikersActiviteitenPaged
  gebruiker: Gebruiker
  huishouden(id: Int!): Huishouden
  huishoudens(ids: [Int] = [], filters: BurgerFilter): [Huishouden]
  huishoudensPaged(start: Int, limit: Int, filters: BurgerFilter): HuishoudensPaged
  afdeling(id: Int!): Afdeling
  afdelingen(ids: [Int] = []): [Afdeling]
  postadres(id: String!): Postadres
  postadressen(ids: [String] = []): [Postadres]
}
"""GraphQL Afspraak model """
type Afspraak {
  id: Int
  burger: Burger
  omschrijving: String
  tegenRekening: Rekening
  bedrag: Bedrag
  credit: Boolean
  zoektermen: [String]
  betaalinstructie: Betaalinstructie
  journaalposten: [Journaalpost]
  rubriek: Rubriek
  overschrijvingen(startDatum: Date, eindDatum: Date): [Overschrijving]
  matchingAfspraken: [Afspraak]
  validFrom: Date
  validThrough: Date
}
"""GraphQL Burger model """
type Burger {
  id: Int
  bsn: Int
  telefoonnummer: String
  email: String
  geboortedatum: String
  iban: String @deprecated(reason: "Please use 'rekeningen'")
  achternaam: String
  huisnummer: String
  postcode: String
  straatnaam: String
  voorletters: String
  voornamen: String
  plaatsnaam: String
  rekeningen: [Rekening]
  afspraken: [Afspraak]
  gebruikersactiviteiten: [GebruikersActiviteit]
  huishouden: Huishouden
}
"""GraphQL Rekening model"""
type Rekening {
  id: Int
  iban: String
  rekeninghouder: String
  burgers: [Burger]
  afdelingen: [Afdeling]
  afspraken: [Afspraak]
}
"""GraphQL Afdeling model """
type Afdeling {
  id: Int
  naam: String
  organisatie: Organisatie
  afspraken: [Afspraak]
  rekeningen: [Rekening]
  postadressen: [Postadres]
}
"""GraphQL Organisatie model """
type Organisatie {
  id: Int
  kvknummer: String
  vestigingsnummer: String
  naam: String
  afdelingen: [Afdeling]
}
"""GraphQL Burger model """
type Postadres {
  id: String
  huisnummer: String
  postcode: String
  straatnaam: String
  plaatsnaam: String
}
"""GebruikersActiviteit model"""
type GebruikersActiviteit {
  id: Int
  timestamp: DateTime
  gebruikerId: String
  action: String
  entities: [GebruikersActiviteitEntity]
  snapshotBefore: GebruikersActiviteitSnapshot
  snapshotAfter: GebruikersActiviteitSnapshot
  meta: GebruikersActiviteitMeta
}
"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime
type GebruikersActiviteitEntity {
  entityType: String
  entityId: String
  afspraak: Afspraak
  burger: Burger
  configuratie: Configuratie
  customerStatementMessage: CustomerStatementMessage
  export: Export
  grootboekrekening: Grootboekrekening
  journaalpost: Journaalpost
  organisatie: Organisatie
  rekening: Rekening
  rubriek: Rubriek
  transaction: BankTransaction
  huishouden: Huishouden
}
type Configuratie {
  id: String
  waarde: String
}
"""GraphQL CustomerStatementMessage model"""
type CustomerStatementMessage {
  id: Int
  uploadDate: DateTime
  filename: String
  transactionReferenceNumber: String
  relatedReference: String
  accountIdentification: String
  sequenceNumber: String
  openingBalance: Int
  closingBalance: Int
  closingAvailableFunds: Int
  forwardAvailableBalance: Int
  bankTransactions: [BankTransaction]
}
"""BankTransaction model"""
type BankTransaction {
  id: Int
  customerStatementMessage: CustomerStatementMessage
  statementLine: String
  informationToAccountOwner: String
  bedrag: Bedrag
  isCredit: Boolean
  tegenRekening: Rekening
  tegenRekeningIban: String
  transactieDatum: Date
  isGeboekt: Boolean
  journaalpost: Journaalpost
  suggesties: [Afspraak]
}
"""Decimaal Scalar Description"""
scalar Bedrag
"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date
"""Journaalpost model"""
type Journaalpost {
  id: Int
  afspraak: Afspraak
  transaction: BankTransaction
  grootboekrekening: Grootboekrekening
  isAutomatischGeboekt: Boolean
}
"""Grootboekrekening model """
type Grootboekrekening {
  id: String!
  naam: String
  referentie: String
  omschrijving: String
  credit: Boolean
  parent: Grootboekrekening
  children: [Grootboekrekening]
  rubriek: Rubriek
}
"""GraphQL Rubriek model"""
type Rubriek {
  id: Int
  naam: String
  grootboekrekening: Grootboekrekening
}
"""GraphQL Export model """
type Export {
  id: Int
  naam: String
  timestamp: DateTime
  overschrijvingen: [Overschrijving]
  xmldata: String
  startDatum: String
  eindDatum: String
  sha256: String
}
type Overschrijving {
  id: Int
  afspraak: Afspraak
  export: Export
  datum: String
  bedrag: Bedrag
  bankTransaction: BankTransaction
  status: OverschrijvingStatus
  afspraken: [Afspraak]
}
enum OverschrijvingStatus {
  GEREED
  IN_BEHANDELING
  VERWACHTING
}
"""GraphQL Huishouden model """
type Huishouden {
  id: Int
  burgers: [Burger]
}
type GebruikersActiviteitSnapshot {
  afspraak: Afspraak
  burger: Burger
  configuratie: Configuratie
  customerStatementMessage: CustomerStatementMessage
  export: Export
  grootboekrekening: Grootboekrekening
  journaalpost: Journaalpost
  organisatie: Organisatie
  rubriek: Rubriek
  transaction: BankTransaction
  huishouden: Huishouden
}
type GebruikersActiviteitMeta {
  userAgent: String
  ip: [String]
  applicationVersion: String
}
"""Implementatie op basis van http://schema.org/Schedule"""
type Betaalinstructie {
  byDay: [DayOfWeek]
  byMonth: [Int]
  byMonthDay: [Int]
  repeatFrequency: String
  exceptDates: [String]
  startDate: String
  endDate: String
}
enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
input BankTransactionFilter {
  OR: BankTransactionFilter
  AND: BankTransactionFilter
  isGeboekt: Boolean
  isCredit: Boolean
  id: ComplexFilterType
  bedrag: ComplexBedragFilterType
  tegenRekening: ComplexFilterType
  statementLine: ComplexFilterType
  transactieDatum: ComplexFilterType
}
input ComplexFilterType {
  EQ: DynamicType
  NEQ: DynamicType
  GT: DynamicType
  GTE: DynamicType
  LT: DynamicType
  LTE: DynamicType
  IN: [DynamicType]
  NOTIN: [DynamicType]
  BETWEEN: [DynamicType]
}
"""Accepts dates, datetimes, ints and strings."""
scalar DynamicType
input ComplexBedragFilterType {
  EQ: Bedrag
  NEQ: Bedrag
  GT: Bedrag
  GTE: Bedrag
  LT: Bedrag
  LTE: Bedrag
  IN: [Bedrag]
  NOTIN: [Bedrag]
  BETWEEN: [Bedrag]
}
type BankTransactionsPaged {
  banktransactions: [BankTransaction]
  pageInfo: PageInfo
}
type PageInfo {
  count: Int
  start: Int
  limit: Int
}
type BurgersPaged {
  burgers: [Burger]
  pageInfo: PageInfo
}
type GebruikersActiviteitenPaged {
  gebruikersactiviteiten: [GebruikersActiviteit]
  pageInfo: PageInfo
}
type Gebruiker {
  email: String
  token: String
}
input BurgerFilter {
  OR: BurgerFilter
  AND: BurgerFilter
  id: ComplexFilterType
  telefoonnummer: ComplexFilterType
  email: ComplexFilterType
  geboortedatum: ComplexFilterType
  achternaam: ComplexFilterType
  huisnummer: ComplexFilterType
  postcode: ComplexFilterType
  straatnaam: ComplexFilterType
  voorletters: ComplexFilterType
  voornamen: ComplexFilterType
  plaatsnaam: ComplexFilterType
  huishoudenId: ComplexFilterType
  bedrag: ComplexBedragFilterType
  tegenRekeningId: ComplexFilterType
  zoektermen: ComplexFilterType
  iban: ComplexFilterType
  rekeninghouder: ComplexFilterType
}
type HuishoudensPaged {
  huishoudens: [Huishouden]
  pageInfo: PageInfo
}
"""The root of all mutations """
type RootMutation {
  createBurger(input: CreateBurgerInput): CreateBurger
  deleteBurger(id: Int!): DeleteBurger
  updateBurger(achternaam: String, bsn: Int, email: String, geboortedatum: String, huishouden: HuishoudenInput, huisnummer: String, id: Int!, plaatsnaam: String, postcode: String, straatnaam: String, telefoonnummer: String, voorletters: String, voornamen: String): UpdateBurger
  createAfspraak(input: CreateAfspraakInput!): CreateAfspraak
  updateAfspraak(id: Int!, input: UpdateAfspraakInput!): UpdateAfspraak
  deleteAfspraak(id: Int!): DeleteAfspraak
  updateAfspraakBetaalinstructie(afspraakId: Int!, betaalinstructie: BetaalinstructieInput!): UpdateAfspraakBetaalinstructie
  addAfspraakZoekterm(afspraakId: Int!, zoekterm: String!): AddAfspraakZoekterm
  deleteAfspraakZoekterm(afspraakId: Int!, zoekterm: String!): DeleteAfspraakZoekterm
  createOrganisatie(input: CreateOrganisatieInput): CreateOrganisatie
  updateOrganisatie(id: Int!, kvknummer: String, naam: String, vestigingsnummer: String): UpdateOrganisatie
  deleteOrganisatie(id: Int!): DeleteOrganisatie
  createBurgerRekening(burgerId: Int!, rekening: RekeningInput!): CreateBurgerRekening
  deleteBurgerRekening(burgerId: Int!, id: Int!): DeleteBurgerRekening
  createAfdelingRekening(afdelingId: Int!, rekening: RekeningInput!): CreateAfdelingRekening
  deleteAfdelingRekening(afdelingId: Int!, rekeningId: Int!): DeleteAfdelingRekening
  updateRekening(id: Int!, rekening: RekeningInput!): UpdateRekening
  deleteCustomerStatementMessage(id: Int!): DeleteCustomerStatementMessage
  createCustomerStatementMessage(file: Upload!): CreateCustomerStatementMessage
  """Create a Journaalpost with an Afspraak"""
  createJournaalpostAfspraak(input: CreateJournaalpostAfspraakInput): CreateJournaalpostAfspraak
  """Create a Journaalpost with an Afspraak"""
  createJournaalpostPerAfspraak(input: [CreateJournaalpostAfspraakInput]!): CreateJournaalpostPerAfspraak
  """Create a Journaalpost with a Grootboekrekening"""
  createJournaalpostGrootboekrekening(input: CreateJournaalpostGrootboekrekeningInput): CreateJournaalpostGrootboekrekening
  """Update a Journaalpost with a Grootboekrekening"""
  updateJournaalpostGrootboekrekening(input: UpdateJournaalpostGrootboekrekeningInput): UpdateJournaalpostGrootboekrekening
  """Delete journaalpost by id """
  deleteJournaalpost(id: Int!): DeleteJournaalpost
  createRubriek(grootboekrekeningId: String, naam: String): CreateRubriek
  updateRubriek(grootboekrekeningId: String, id: Int!, naam: String): UpdateRubriek
  deleteRubriek(id: Int!): DeleteRubriek
  createConfiguratie(input: ConfiguratieInput): CreateConfiguratie
  updateConfiguratie(input: ConfiguratieInput): UpdateConfiguratie
  deleteConfiguratie(id: String!): DeleteConfiguratie
  createExportOverschrijvingen(eindDatum: String, startDatum: String): CreateExportOverschrijvingen
  startAutomatischBoeken: StartAutomatischBoeken
  createHuishouden(input: CreateHuishoudenInput): CreateHuishouden
  deleteHuishouden(id: Int!): DeleteHuishouden
  addHuishoudenBurger(burgerIds: [Int]!, huishoudenId: Int!): AddHuishoudenBurger
  deleteHuishoudenBurger(burgerIds: [Int]!, huishoudenId: Int!): DeleteHuishoudenBurger
  createAfdeling(input: CreateAfdelingInput): CreateAfdeling
  updateAfdeling(id: Int!, naam: String, organisatieId: Int): UpdateAfdeling
  deleteAfdeling(id: Int!): DeleteAfdeling
  createPostadres(input: CreatePostadresInput): CreatePostadres
  updatePostadres(huisnummer: String, id: String!, plaatsnaam: String, postcode: String, straatnaam: String): UpdatePostadres
  deletePostadres(afdelingId: Int!, id: String!): DeletePostadres
}
type CreateBurger {
  ok: Boolean
  burger: Burger
}
input CreateBurgerInput {
  bsn: Int
  email: String
  geboortedatum: Date
  telefoonnummer: String
  rekeningen: [RekeningInput]
  achternaam: String
  huisnummer: String
  postcode: String
  straatnaam: String
  voorletters: String
  voornamen: String
  plaatsnaam: String
  huishouden: HuishoudenInput
}
input RekeningInput {
  iban: String
  rekeninghouder: String
}
input HuishoudenInput {
  id: Int
}
type DeleteBurger {
  ok: Boolean
  previous: Burger
}
type UpdateBurger {
  ok: Boolean
  burger: Burger
  previous: Burger
}
type CreateAfspraak {
  ok: Boolean
  afspraak: Afspraak
}
input CreateAfspraakInput {
  burgerId: Int!
  credit: Boolean!
  afdelingId: Int
  tegenRekeningId: Int!
  rubriekId: Int!
  omschrijving: String!
  bedrag: Bedrag!
  validFrom: String
  validThrough: String
}
type UpdateAfspraak {
  ok: Boolean
  afspraak: Afspraak
  previous: Afspraak
}
input UpdateAfspraakInput {
  burgerId: Int
  credit: Boolean
  afdelingId: Int
  tegenRekeningId: Int
  rubriekId: Int
  omschrijving: String
  bedrag: Bedrag
  validThrough: String
}
type DeleteAfspraak {
  ok: Boolean
  previous: Afspraak
}
type UpdateAfspraakBetaalinstructie {
  ok: Boolean
  afspraak: Afspraak
  previous: Afspraak
}
"""Implementatie op basis van http://schema.org/Schedule"""
input BetaalinstructieInput {
  byDay: [DayOfWeek]
  byMonth: [Int]
  byMonthDay: [Int]
  repeatFrequency: String
  exceptDates: [String]
  startDate: String!
  endDate: String
}
type AddAfspraakZoekterm {
  ok: Boolean
  afspraak: Afspraak
  previous: Afspraak
  matchingAfspraken: [Afspraak]
}
type DeleteAfspraakZoekterm {
  ok: Boolean
  afspraak: Afspraak
  previous: Afspraak
  matchingAfspraken: [Afspraak]
}
type CreateOrganisatie {
  ok: Boolean
  organisatie: Organisatie
}
input CreateOrganisatieInput {
  kvknummer: String!
  vestigingsnummer: String
  naam: String
}
type UpdateOrganisatie {
  ok: Boolean
  organisatie: Organisatie
  previous: Organisatie
}
type DeleteOrganisatie {
  ok: Boolean
  previous: Organisatie
}
type CreateBurgerRekening {
  ok: Boolean
  rekening: Rekening
}
type DeleteBurgerRekening {
  ok: Boolean
  previous: Rekening
}
type CreateAfdelingRekening {
  ok: Boolean
  rekening: Rekening
}
type DeleteAfdelingRekening {
  ok: Boolean
  previous: Rekening
}
type UpdateRekening {
  ok: Boolean
  rekening: Rekening
  previous: Rekening
}
type DeleteCustomerStatementMessage {
  ok: Boolean
  previous: CustomerStatementMessage
}
type CreateCustomerStatementMessage {
  ok: Boolean
  customerStatementMessage: [CustomerStatementMessage]
  journaalposten: [Journaalpost]
}
"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload
"""Create a Journaalpost with an Afspraak"""
type CreateJournaalpostAfspraak {
  ok: Boolean
  journaalpost: Journaalpost
}
input CreateJournaalpostAfspraakInput {
  transactionId: Int!
  afspraakId: Int!
  isAutomatischGeboekt: Boolean!
}
"""Create a Journaalpost with an Afspraak"""
type CreateJournaalpostPerAfspraak {
  ok: Boolean
  journaalposten: [Journaalpost]
}
"""Create a Journaalpost with a Grootboekrekening"""
type CreateJournaalpostGrootboekrekening {
  ok: Boolean
  journaalpost: Journaalpost
}
input CreateJournaalpostGrootboekrekeningInput {
  transactionId: Int!
  grootboekrekeningId: String!
  isAutomatischGeboekt: Boolean!
}
"""Update a Journaalpost with a Grootboekrekening"""
type UpdateJournaalpostGrootboekrekening {
  ok: Boolean
  journaalpost: Journaalpost
  previous: Journaalpost
}
input UpdateJournaalpostGrootboekrekeningInput {
  id: Int!
  grootboekrekeningId: String!
}
"""Delete journaalpost by id """
type DeleteJournaalpost {
  ok: Boolean
  previous: Journaalpost
}
type CreateRubriek {
  ok: Boolean
  rubriek: Rubriek
}
type UpdateRubriek {
  ok: Boolean
  rubriek: Rubriek
  previous: Rubriek
}
type DeleteRubriek {
  ok: Boolean
  previous: Rubriek
}
type CreateConfiguratie {
  ok: Boolean
  configuratie: Configuratie
}
input ConfiguratieInput {
  id: String!
  waarde: String
}
type UpdateConfiguratie {
  ok: Boolean
  configuratie: Configuratie
  previous: Configuratie
}
type DeleteConfiguratie {
  ok: Boolean
  previous: Configuratie
}
type CreateExportOverschrijvingen {
  ok: Boolean
  export: Export
}
type StartAutomatischBoeken {
  ok: Boolean
  journaalposten: [Journaalpost]
}
type CreateHuishouden {
  ok: Boolean
  huishouden: Huishouden
}
input CreateHuishoudenInput {
  burgerIds: [Int] = []
}
type DeleteHuishouden {
  ok: Boolean
  previous: Huishouden
}
type AddHuishoudenBurger {
  ok: Boolean
  huishouden: Huishouden
  previous: Huishouden
  burgerIds: Burger
}
type DeleteHuishoudenBurger {
  ok: Boolean
  huishouden: [Huishouden]
  previous: Huishouden
  burgerIds: [Burger]
}
type CreateAfdeling {
  ok: Boolean
  afdeling: Afdeling
}
input CreateAfdelingInput {
  organisatieId: Int!
  naam: String!
  rekeningen: [RekeningInput]
  postadressen: [CreatePostadresInput]
}
input CreatePostadresInput {
  straatnaam: String!
  huisnummer: String!
  postcode: String!
  plaatsnaam: String!
  afdelingId: Int
}
type UpdateAfdeling {
  ok: Boolean
  afdeling: Afdeling
  previous: Afdeling
}
type DeleteAfdeling {
  ok: Boolean
  previous: Afdeling
}
type CreatePostadres {
  ok: Boolean
  postadres: Postadres
  afdeling: Afdeling
}
type UpdatePostadres {
  ok: Boolean
  postadres: Postadres
  previous: Postadres
}
type DeletePostadres {
  ok: Boolean
  previous: Postadres
  afdeling: Afdeling
}
