// <auto-generated />
using System;
using BankServices.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankServices.Domain.Migrations
{
    [DbContext(typeof(BankServiceContext))]
    [Migration("20240926112210_AddedUploadAtToCsm")]
    partial class AddedUploadAtToCsm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.CustomerStatementMessage", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("AccountIdentification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_identification");

                    b.Property<Guid>("FileUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("file_uuid");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_reference");

                    b.Property<long>("UploadedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Uuid");

                    b.HasIndex("UploadedAt");

                    b.ToTable("customerstatementmessages");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.PaymentExport", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint")
                        .HasColumnName("end_date");

                    b.Property<Guid>("FileUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("file_uuid");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint")
                        .HasColumnName("start_Date");

                    b.HasKey("Uuid");

                    b.ToTable("paymentexports");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.PaymentRecord", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("AccountIban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_iban");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<Guid>("AgreementUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("agreement_uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("OriginalProcessingDate")
                        .HasColumnType("bigint")
                        .HasColumnName("original_processing_date");

                    b.Property<Guid?>("PaymentExportUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_export_uuid");

                    b.Property<long>("ProcessingDate")
                        .HasColumnType("bigint")
                        .HasColumnName("processing_date");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("reconciled");

                    b.Property<Guid?>("TransactionUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("PaymentExportUuid");

                    b.ToTable("paymentrecords");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.Transaction", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<Guid>("CustomerStatementMessageUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_statement_message");

                    b.Property<long>("Date")
                        .HasColumnType("bigint")
                        .HasColumnName("date");

                    b.Property<string>("FromAccount")
                        .HasColumnType("text")
                        .HasColumnName("from_account");

                    b.Property<string>("InformationToAccountOwner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("information_to_account_owner");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_credit");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reconciled");

                    b.HasKey("Uuid");

                    b.HasIndex("CustomerStatementMessageUuid");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.PaymentRecord", b =>
                {
                    b.HasOne("BankServices.Domain.Contexts.Models.PaymentExport", null)
                        .WithMany("Records")
                        .HasForeignKey("PaymentExportUuid");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.Transaction", b =>
                {
                    b.HasOne("BankServices.Domain.Contexts.Models.CustomerStatementMessage", "CustomerStatementMessage")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerStatementMessageUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerStatementMessage");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.CustomerStatementMessage", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankServices.Domain.Contexts.Models.PaymentExport", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
