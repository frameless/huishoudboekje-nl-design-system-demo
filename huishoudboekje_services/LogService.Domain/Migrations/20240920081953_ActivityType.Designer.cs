// <auto-generated />
using System;
using LogService.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogService.Database.Migrations
{
    [DbContext(typeof(LogServiceContext))]
    [Migration("20240920081953_ActivityType")]
    partial class ActivityType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogService.Database.Contexts.ExceptionsLogs", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Uuid");

                    b.HasIndex("Timestamp");

                    b.ToTable("exception_logs");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivities", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<string>("SnapshotAfter")
                        .HasColumnType("text")
                        .HasColumnName("snapshot_after");

                    b.Property<string>("SnapshotBefore")
                        .HasColumnType("text")
                        .HasColumnName("snapshot_before");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("activity_type");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Uuid");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("user_activities");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivityEntities", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<Guid>("user_activity_uuid")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId", "EntityType", "user_activity_uuid");

                    b.HasIndex("user_activity_uuid");

                    b.ToTable("user_activity_entities");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("useractivitytypes");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivities", b =>
                {
                    b.HasOne("LogService.Database.Contexts.UserActivityType", "UserActivityType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivityType");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivityEntities", b =>
                {
                    b.HasOne("LogService.Database.Contexts.UserActivities", "UserActivities")
                        .WithMany("Entities")
                        .HasForeignKey("user_activity_uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("LogService.Database.Contexts.UserActivities", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
