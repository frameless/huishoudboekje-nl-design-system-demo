---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hhb-keycloak
  labels:
    name: hhb-keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      name: hhb-keycloak
  template:
    metadata:
      labels:
        name: hhb-keycloak
    spec:
      initContainers:
        - name: init1-wait-for-db
          image: busybox
          envFrom:
            - configMapRef:
                name: postgres-config
          command:
            [
                "sh",
                "-c",
                "while true; do sleep 1; echo Waiting for database...; if nc -z $POSTGRESQL_HOSTNAME $POSTGRESQL_PORT; then echo Database is up!; exit 0; fi; done; echo Aint gonna wait for the database forever...; exit 1",
            ]
        - name: init2-prepare-db
          image: bitnami/postgresql:13
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: postgres-config
            - configMapRef:
                name: keycloak-config
          env:
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hhb-database-secrets
                  key: POSTGRESQL_PASSWORD
            - name: KEYCLOAK_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hhb-keycloak-secrets
                  key: KEYCLOAK_DB_PASSWORD
          command: [ "/bin/sh" ]
          args:
            - -c
            - >-
              export PGPASSWORD=$POSTGRESQL_PASSWORD &&
              export PGPORT=$POSTGRESQL_PORT &&
              psql -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -c "CREATE USER $DB_USER WITH PASSWORD '$KEYCLOAK_DB_PASSWORD'" || true &&
              psql -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -c "CREATE DATABASE $DB_DATABASE" || true &&
              psql -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -c "GRANT ALL PRIVILEGES ON DATABASE $DB_DATABASE TO $DB_USER" || true &&
              psql -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -c "ALTER USER $DB_USER WITH PASSWORD '$KEYCLOAK_DB_PASSWORD'" || true;
      containers:
        - name: hhb-keycloak
          image: "quay.io/keycloak/keycloak:15.1.1"
          imagePullPolicy: "Always"
          envFrom:
            - configMapRef:
                name: keycloak-config
          env:
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRESQL_PORT
            - name: KEYCLOAK_USER
              valueFrom:
                configMapKeyRef:
                  name: keycloak-config
                  key: KEYCLOAK_AUTH_USERNAME
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hhb-keycloak-secrets
                  key: KEYCLOAK_AUTH_PASSWORD
            - name: DB_ADDR
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRESQL_HOSTNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hhb-keycloak-secrets
                  key: KEYCLOAK_DB_PASSWORD
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: REDIRECT_SOCKET
              value: "proxy-https"
            - name: KEYCLOAK_FRONTEND_URL
              valueFrom:
                configMapKeyRef:
                  name: keycloak-config
                  key: KEYCLOAK_AUTH_KEYCLOAK_URL
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 512Mi
          startupProbe:
            failureThreshold: 60
            periodSeconds: 10
            httpGet:
              path: /auth
              port: http
          livenessProbe:
            httpGet:
              path: /auth
              port: http
          readinessProbe:
            httpGet:
              path: /auth
              port: http
