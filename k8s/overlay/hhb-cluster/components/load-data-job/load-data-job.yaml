apiVersion: batch/v1
kind: Job
metadata:
  name: load-data-job
spec:
  backoffLimit: 2
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-huishoudboekjeservice
        image: alpine/curl
        command: ['sh', '-c', 'until curl -s http://hhb-huishoudboekjeservice/health; do echo waiting for huishoudboekjeservice; sleep 2; done;']
      - name: wait-for-organisatieservice
        image: alpine/curl
        command: ['sh', '-c', 'until curl -s http://hhb-organisatieservice/health; do echo waiting for organisatieservice; sleep 2; done;']
      - name: wait-for-postadressenservice
        image: alpine/curl
        command: ['sh', '-c', 'until curl -s http://hhb-postadressenservice/health; do echo waiting for postadressenservice; sleep 2; done;']
      containers:
      - name: load-data
        image: bitnami/postgresql:13
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "start"
            pg_restore  -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DATABASE_NAME_HHBSVC --data-only -Ft ./data-files/huishoudboekje.pgdump
            pg_restore  -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DATABASE_NAME_ORGSVC --data-only -Ft ./data-files/organisatie.pgdump
            pg_restore  -h $POSTGRESQL_HOSTNAME -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DATABASE_NAME_PADSVC --data-only -Ft ./data-files/postadressen.pgdump
            echo "done"
            sleep 601;
        envFrom:
          - configMapRef:
              name: postgres-config
        volumeMounts:
            - name: data-files
              mountPath: /data-files
      volumes:
      - name: data-files
        projected:
          sources:
            - configMap:
                name: huishoudboekje-data
            - configMap:
                name: organisatie-data
            - configMap:
                name: postadressen-data