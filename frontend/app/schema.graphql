# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: RootQuery
    mutation: RootMutation
}

"GraphQL Afspraak model "
type Afspraak {
    aantalBetalingen: Int
    actief: Boolean
    bedrag: Bedrag
    beschrijving: String
    credit: Boolean
    eindDatum: Date
    gebruiker: Gebruiker
    id: Int
    interval: Interval
    kenmerk: String
    organisatie: Organisatie
    startDatum: Date
    tegenRekening: Rekening
}

type CreateAfspraak {
    afspraak: Afspraak
    ok: Boolean
}

type CreateGebruiker {
    gebruiker: Gebruiker
    ok: Boolean
}

type CreateOrganisatie {
    ok: Boolean
    organisatie: Organisatie
}

type DeleteAfspraak {
    ok: Boolean
}

type DeleteGebruiker {
    ok: Boolean
}

type DeleteOrganisatie {
    ok: Boolean
}

type DeleteRekening {
    ok: Boolean
}

"GraphQL Gebruiker model "
type Gebruiker {
    achternaam: String
    afspraken: [Afspraak]
    email: String
    geboortedatum: String
    huisnummer: String
    iban: String @deprecated(reason : "Please use 'rekeningen'")
    id: Int
    plaatsnaam: String
    postcode: String
    rekeningen: [Rekening]
    straatnaam: String
    telefoonnummer: String
    voorletters: String
    voornamen: String
}

type Interval {
    dagen: Int
    jaren: Int
    maanden: Int
    weken: Int
}

"GraphQL Organisatie model "
type Organisatie {
    id: Int
    kvkDetails: OrganisatieKvK
    kvkNummer: String
    rekeningen: [Rekening]
    weergaveNaam: String
}

type OrganisatieKvK {
    huisnummer: String
    naam: String
    nummer: String
    plaatsnaam: String
    postcode: String
    straatnaam: String
}

"GraphQL Rekening model"
type Rekening {
    iban: String
    id: Int
    rekeninghouder: String
}

"The root of all mutations "
type RootMutation {
    createAfspraak(aantalBetalingen: Int, actief: Boolean, bedrag: Bedrag, beschrijving: String, credit: Boolean, eindDatum: Date, gebruikerId: Int, interval: IntervalInput, kenmerk: String, startDatum: Date, tegenRekeningId: Int): CreateAfspraak
    createGebruiker(input: CreateGebruikerInput): CreateGebruiker
    createOrganisatie(huisnummer: String, kvkNummer: String!, naam: String, plaatsnaam: String, postcode: String, straatnaam: String, weergaveNaam: String!): CreateOrganisatie
    deleteAfspraak(id: Int!): DeleteAfspraak
    deleteGebruiker(id: Int!): DeleteGebruiker
    deleteOrganisatie(id: Int!): DeleteOrganisatie
    deleteRekening(gebruikerId: Int, id: Int!, organisatieId: Int): DeleteRekening
    updateAfspraak(aantalBetalingen: Int, actief: Boolean, bedrag: Bedrag, beschrijving: String, credit: Boolean, eindDatum: Date, gebruikerId: Int, id: Int!, interval: IntervalInput, kenmerk: String, startDatum: Date, tegenRekeningId: Int): UpdateAfspraak
    updateGebruiker(achternaam: String, email: String, geboortedatum: String, huisnummer: String, id: Int!, plaatsnaam: String, postcode: String, straatnaam: String, telefoonnummer: String, voorletters: String, voornamen: String): UpdateGebruiker
    updateGebruikerRekeningen(gebruikerId: Int, rekeningen: [RekeningInput]): UpdateGebruikerRekeningen
    updateOrganisatie(huisnummer: String, id: Int!, kvkNummer: String, naam: String, plaatsnaam: String, postcode: String, straatnaam: String, weergaveNaam: String): UpdateOrganisatie
    updateRekening(iban: String, id: Int!, rekeninghouder: String): UpdateRekening
}

"The root of all queries "
type RootQuery {
    afspraak(id: Int!): Afspraak
    afspraken(ids: [Int] = []): [Afspraak]
    gebruiker(id: Int!): Gebruiker
    gebruikers(ids: [Int] = []): [Gebruiker]
    organisatie(id: Int!): Organisatie
    organisaties(ids: [Int] = []): [Organisatie]
}

type UpdateAfspraak {
    afspraak: Afspraak
    ok: Boolean
}

type UpdateGebruiker {
    gebruiker: Gebruiker
    ok: Boolean
}

type UpdateGebruikerRekeningen {
    ok: Boolean
    rekeningen: [Rekening]
}

type UpdateOrganisatie {
    ok: Boolean
    organisatie: Organisatie
}

type UpdateRekening {
    ok: Boolean
    rekening: Rekening
}

input CreateGebruikerInput {
    achternaam: String
    email: String
    geboortedatum: Date
    huisnummer: String
    plaatsnaam: String
    postcode: String
    rekeningen: [RekeningInput]
    straatnaam: String
    telefoonnummer: String
    voorletters: String
    voornamen: String
}

input IntervalInput {
    dagen: Int
    jaren: Int
    maanden: Int
    weken: Int
}

input RekeningInput {
    iban: String
    id: Int
    rekeninghouder: String
}


"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"Decimaal Scalar Description"
scalar Bedrag