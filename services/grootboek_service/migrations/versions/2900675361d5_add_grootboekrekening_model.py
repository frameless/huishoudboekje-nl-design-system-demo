"""Add grootboekrekening model

Revision ID: 2900675361d5
Revises: 
Create Date: 2020-11-16 15:56:25.981952

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
from models import Grootboekrekening

# revision identifiers, used by Alembic.
revision = '2900675361d5'
down_revision = None
branch_labels = None
depends_on = None



def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('grootboekrekeningen',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('referentie', sa.String(), nullable=True),
    sa.Column('naam', sa.String(), nullable=True),
    sa.Column('omschijving_kort', sa.String(), nullable=True),
    sa.Column('omschijving_lang', sa.String(), nullable=True),
    sa.Column('parent_id', sa.String(), nullable=True),
    sa.Column('debet', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['grootboekrekeningen.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    load_initial_data()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grootboekrekeningen')
    # ### end Alembic commands ###

def load_initial_data():
    data = get_grootboekrekenignen()
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    for key, row_data in data.items():
        gbr = Grootboekrekening(id=row_data["id"])
        gbr.naam = row_data["naam"]
        gbr.referentie = row_data["referentie"]
        gbr.omschijving_kort = row_data["naam"]
        gbr.omschijving_lang = row_data["boekhoudkundige_naam"]
        if "parent_id" in row_data:
            gbr.parent_id = row_data["parent_id"]
        gbr.debet = row_data["debet"]
        session.add(gbr)
    session.commit()


def get_grootboekrekenignen():
    insert_data = {}
    with open("data/RGS-3.2-6-december-2019.csv", "r") as fh:
        for line in fh.readlines()[1:]:
            linedata = [l[1:-1] for l in line.strip().split(",")]
            if linedata[3]:
                reccord = {
                    "id": linedata[0],
                    "referentie": linedata[3],
                    "naam": linedata[4],
                    "boekhoudkundige_naam": linedata[5],
                    "debet": linedata[6] == "D"
                }
                own_name = linedata[0]
                parent_id = recursive_find_parent(own_name, insert_data)
                if parent_id:
                    reccord["parent_id"] = parent_id
                insert_data[own_name] = reccord
    return insert_data

def recursive_find_parent(name, parent_list):
    if len(name) == 0:
        return None
    if name in parent_list:
        return parent_list[name]["id"]
    return recursive_find_parent(name[:-1], parent_list)
